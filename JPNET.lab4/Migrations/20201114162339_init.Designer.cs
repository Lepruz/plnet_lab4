// <auto-generated />
using System;
using JPNET.lab4.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JPNET.lab4.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201114162339_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("JPNET.lab4.Models.Klient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("klient_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Klienci");

                    b.HasDiscriminator<string>("klient_type").HasValue("klient");
                });

            modelBuilder.Entity("JPNET.lab4.Models.Przedmiot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KlientId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.ToTable("Przedmioty");
                });

            modelBuilder.Entity("JPNET.lab4.Models.Zamowienie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("KlientId")
                        .HasColumnType("int");

                    b.Property<bool>("Zrealizowane")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.ToTable("zamowienia");
                });

            modelBuilder.Entity("JPNET.lab4.Models.ZamowieniePrzedmiot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Liczba")
                        .HasColumnType("int");

                    b.Property<int?>("PrzedmiotId")
                        .HasColumnType("int");

                    b.Property<int?>("ZamowienieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrzedmiotId");

                    b.HasIndex("ZamowienieId");

                    b.ToTable("ZamowieniaPrzedmiotow");
                });

            modelBuilder.Entity("JPNET.lab4.Models.KlientInternetowy", b =>
                {
                    b.HasBaseType("JPNET.lab4.Models.Klient");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("klient_internetowy");
                });

            modelBuilder.Entity("JPNET.lab4.Models.ZamowienieInternetowe", b =>
                {
                    b.HasBaseType("JPNET.lab4.Models.Zamowienie");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("zamowienia_internetowe");
                });

            modelBuilder.Entity("JPNET.lab4.Models.Przedmiot", b =>
                {
                    b.HasOne("JPNET.lab4.Models.Klient", "Klient")
                        .WithMany()
                        .HasForeignKey("KlientId");

                    b.Navigation("Klient");
                });

            modelBuilder.Entity("JPNET.lab4.Models.Zamowienie", b =>
                {
                    b.HasOne("JPNET.lab4.Models.Klient", "Klient")
                        .WithMany()
                        .HasForeignKey("KlientId");

                    b.Navigation("Klient");
                });

            modelBuilder.Entity("JPNET.lab4.Models.ZamowieniePrzedmiot", b =>
                {
                    b.HasOne("JPNET.lab4.Models.Przedmiot", "Przedmiot")
                        .WithMany()
                        .HasForeignKey("PrzedmiotId");

                    b.HasOne("JPNET.lab4.Models.Zamowienie", "Zamowienie")
                        .WithMany("Przedmioty")
                        .HasForeignKey("ZamowienieId");

                    b.Navigation("Przedmiot");

                    b.Navigation("Zamowienie");
                });

            modelBuilder.Entity("JPNET.lab4.Models.ZamowienieInternetowe", b =>
                {
                    b.HasOne("JPNET.lab4.Models.Zamowienie", null)
                        .WithOne()
                        .HasForeignKey("JPNET.lab4.Models.ZamowienieInternetowe", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JPNET.lab4.Models.Zamowienie", b =>
                {
                    b.Navigation("Przedmioty");
                });
#pragma warning restore 612, 618
        }
    }
}
